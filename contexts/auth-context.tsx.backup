'use client';

import { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { User } from '@supabase/supabase-js';
import { createClient } from '@/lib/supabase/client';
import { useRouter } from 'next/navigation';

interface AuthContextType {
  user: User | null;
  companyId: string | null;
  loading: boolean;
  signOut: () => Promise<void>;
  refreshUser: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  companyId: null,
  loading: true,
  signOut: async () => {},
  refreshUser: async () => {},
});

// Session cache
let sessionCache: {
  user: User | null;
  companyId: string | null;
  timestamp: number;
} | null = null;

const CACHE_TTL = 5 * 60 * 1000; // 5 dakika

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [companyId, setCompanyId] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();
  const supabase = createClient();

  const loadUserData = useCallback(async (forceRefresh = false) => {
    try {
      // Cache kontrolü
      if (!forceRefresh && sessionCache && (Date.now() - sessionCache.timestamp < CACHE_TTL)) {
        setUser(sessionCache.user);
        setCompanyId(sessionCache.companyId);
        setLoading(false);
        return;
      }

      // Session'ı getSession ile al (getUser'dan daha hızlı)
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session?.user) {
        setUser(session.user);
        
        // Company ID'yi al (sadece gerekirse)
        const { data: userData } = await supabase
          .from('users')
          .select('company_id')
          .eq('id', session.user.id)
          .single();

        const compId = userData?.company_id || null;
        setCompanyId(compId);
        
        // Cache'e kaydet
        sessionCache = {
          user: session.user,
          companyId: compId,
          timestamp: Date.now()
        };
      } else {
        setUser(null);
        setCompanyId(null);
        sessionCache = null;
      }
    } catch (error) {
      console.error('Error loading user data:', error);
      setUser(null);
      setCompanyId(null);
      sessionCache = null;
    } finally {
      setLoading(false);
    }
  }, [supabase]);

  useEffect(() => {
    // İlk yükleme
    loadUserData();

    // Auth state değişikliklerini dinle
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          // Yeni login veya token yenileme durumunda cache'i temizle
          sessionCache = null;
          await loadUserData(true);
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setCompanyId(null);
          sessionCache = null;
          setLoading(false);
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, [loadUserData, supabase.auth]);

  const signOut = async () => {
    try {
      sessionCache = null;
      await supabase.auth.signOut();
      router.push('/login');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const refreshUser = async () => {
    sessionCache = null;
    await loadUserData(true);
  };

  const value = {
    user,
    companyId,
    loading,
    signOut,
    refreshUser,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};